;;; flycheck-fecs.el --- Support Flow in flycheck

;; Copyright (C) 2017 Niandalu <niandalu@gmail.com>
;;
;; Author: Niandalu <niandalu@gmail.com>
;; Created: 30 November 2017
;; Version: 1.0
;; Package-Requires: ((flycheck "0.18") (json "1.4"))

;;; Commentary:

;; This package adds support for FECS to flycheck.  It requires
;; fecs>=1.5.3
;; For more information please check out
;; https://github.com/ecomfe/fecs

;; To use it, add to your init.el:

;; (require 'flycheck-fecs)

;;; License:

;; This file is not part of GNU Emacs.
;; However, it is distributed under the same license.

;; GNU Emacs is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Code:
(require 'json)
(require 'flycheck)

(defun flycheck-fecs--predicate ()
  "Shall we run the checker?"
  t)

(defun flycheck-fecs--parse-report (report buffer)
  "Parse single file REPORT of BUFFER."
  (let ((path (cdr (assq 'path report)))
        (errors (cdr (assq 'errors report))))

    (mapcar
     (lambda (error)
       (let-alist error
         (flycheck-error-new-at
          .line
          .column
          (nth .severity (list 'info 'warning 'error))
          .message
          :id .rule
          :checker checker
          :buffer buffer
          :filename path)))
     errors)))

(defun flycheck-fecs--parse-error (output checker buffer)
  "Parse flycheck json OUTPUT generated by CHECKER on BUFFER."
  (let* ((reports (json-read-from-string output))
         errors)

    (flycheck-fecs--parse-report (car (append reports nil)) buffer)))

(flycheck-define-checker baidu-fecs
  "A js, css, html syntax checker using FECS.
See URL `https://github.com/ecomfe/fecs`."
  :command ("fecs" "check" "--color=false" "--silent" "--reporter=baidu" "--format=json"
            source-inplace)
  :error-parser flycheck-fecs--parse-error
  :modes (js-mode js2-mode js-jsx-mode js2-jsx-mode css-mode less-css-mode html-mode)
  :predicate flycheck-fecs--predicate)

(add-to-list 'flycheck-checkers 'baidu-fecs)

(provide 'flycheck-fecs)
;;; flycheck-fecs.el ends here
